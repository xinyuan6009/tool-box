"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getConfig;

var _stringify = _interopRequireDefault(require("@babel/runtime/core-js/json/stringify"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _webpack = _interopRequireDefault(require("webpack"));

var _caseSensitivePathsWebpackPlugin = _interopRequireDefault(require("case-sensitive-paths-webpack-plugin"));

var _systemBellWebpackPlugin = _interopRequireDefault(require("system-bell-webpack-plugin"));

var _WatchMissingNodeModulesPlugin = _interopRequireDefault(require("react-dev-utils/WatchMissingNodeModulesPlugin"));

var _extractTextWebpackPlugin = _interopRequireDefault(require("extract-text-webpack-plugin"));

var _webpackManifestPlugin = _interopRequireDefault(require("webpack-manifest-plugin"));

var _swPrecacheWebpackPlugin = _interopRequireDefault(require("sw-precache-webpack-plugin"));

var _autoprefixer = _interopRequireDefault(require("autoprefixer"));

var _path = require("path");

var _fs = require("fs");

var _eslintFormatter = _interopRequireDefault(require("react-dev-utils/eslintFormatter"));

var _assert = _interopRequireDefault(require("assert"));

var _webpackBundleAnalyzer = require("webpack-bundle-analyzer");

var _copyWebpackPlugin = _interopRequireDefault(require("copy-webpack-plugin"));

var _htmlWebpackPlugin = _interopRequireDefault(require("html-webpack-plugin"));

var _resolve = require("resolve");

var _forkTsCheckerWebpackPlugin = _interopRequireDefault(require("fork-ts-checker-webpack-plugin"));

var _uglifyJS = _interopRequireDefault(require("./defaultConfigs/uglifyJS"));

var _babel = _interopRequireDefault(require("./defaultConfigs/babel"));

var _browsers = _interopRequireDefault(require("./defaultConfigs/browsers"));

var _stringifyObject = _interopRequireDefault(require("./stringifyObject"));

var _normalizeTheme = _interopRequireDefault(require("./normalizeTheme"));

var _applyWebpackConfig = require("./applyWebpackConfig");

var _readRc = _interopRequireDefault(require("./readRc"));

var _utils = require("./utils");

var debug = require('debug')('af-webpack:getConfig');

function getConfig() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  (0, _assert.default)(opts.cwd, 'opts.cwd must be specified');
  var isDev = process.env.NODE_ENV === 'development';
  var theme = (0, _normalizeTheme.default)(opts.theme);
  var postcssOptions = {
    // Necessary for external CSS imports to work
    // https://github.com/facebookincubator/create-react-app/issues/2677
    ident: 'postcss',
    plugins: function plugins() {
      return [require('postcss-flexbugs-fixes'), (0, _autoprefixer.default)({
        browsers: opts.browserslist || _browsers.default,
        flexbox: 'no-2009'
      })].concat((0, _toConsumableArray2.default)(opts.extraPostCSSPlugins ? opts.extraPostCSSPlugins : []));
    }
  };
  var cssModulesConfig = opts.disableCSSModules ? {} : {
    modules: true,
    localIdentName: '[local]___[hash:base64:5]'
  };
  var lessOptions = {
    modifyVars: theme
  };
  var cssOptions = (0, _extends2.default)({
    importLoaders: 1
  }, isDev ? {} : {
    minimize: !process.env.NO_COMPRESS,
    sourceMap: !opts.disableCSSSourceMap
  });

  function getCSSLoader() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var cssModules = opts.cssModules,
        less = opts.less,
        sass = opts.sass,
        sassOptions = opts.sassOptions;
    var hasSassLoader = true;

    try {
      require.resolve('sass-loader');
    } catch (e) {
      hasSassLoader = false;
    }

    return [require.resolve('style-loader'), {
      loader: require.resolve('css-loader'),
      options: (0, _extends2.default)({}, cssOptions, cssModules ? cssModulesConfig : {})
    }, {
      loader: require.resolve('postcss-loader'),
      options: postcssOptions
    }].concat((0, _toConsumableArray2.default)(less ? [{
      loader: require.resolve('less-loader'),
      options: lessOptions
    }] : []), (0, _toConsumableArray2.default)(sass && hasSassLoader ? [{
      loader: require.resolve('sass-loader'),
      options: sassOptions
    }] : []));
  }

  var cssRules = [{
    test: /\.css$/,
    exclude: /node_modules/,
    use: getCSSLoader({
      cssModules: true
    })
  }, {
    test: /\.css$/,
    include: /node_modules/,
    use: getCSSLoader()
  }, {
    test: /\.less$/,
    exclude: /node_modules/,
    use: getCSSLoader({
      cssModules: true,
      less: true
    })
  }, {
    test: /\.less$/,
    include: /node_modules/,
    use: getCSSLoader({
      less: true
    })
  }, {
    test: /\.(sass|scss)$/,
    exclude: /node_modules/,
    use: getCSSLoader({
      cssModules: true,
      sass: true,
      sassOptions: opts.sass
    })
  }, {
    test: /\.(sass|scss)$/,
    include: /node_modules/,
    use: getCSSLoader({
      sass: true,
      sassOptions: opts.sass
    })
  }]; // 生成环境下用 ExtractTextPlugin 提取出来

  if (!isDev) {
    cssRules.forEach(function (rule) {
      rule.use = _extractTextWebpackPlugin.default.extract({
        use: rule.use.slice(1)
      });
    });
  } // TODO: 根据 opts.hash 自动处理这里的 filename


  var commonsPlugins = (opts.commons || []).map(function (common) {
    return new _webpack.default.optimize.CommonsChunkPlugin(common);
  }); // Declare outputPath here for reuse

  var outputPath = opts.outputPath ? (0, _path.resolve)(opts.cwd, opts.outputPath) : (0, _path.resolve)(opts.cwd, 'dist'); // Copy files in public to outputPath

  var copyPlugins = opts.copy ? [new _copyWebpackPlugin.default(opts.copy)] : [];

  if ((0, _fs.existsSync)((0, _path.resolve)(opts.cwd, 'public'))) {
    copyPlugins.push(new _copyWebpackPlugin.default([{
      from: (0, _path.resolve)(opts.cwd, 'public'),
      to: outputPath,
      toType: 'dir'
    }]));
  } // js 和 css 采用不同的 hash 算法


  var jsHash = !isDev && opts.hash ? '.[chunkhash:8]' : '';
  var cssHash = !isDev && opts.hash ? '.[contenthash:8]' : '';
  var babelOptions = (0, _extends2.default)({}, opts.babel || _babel.default, {
    // 性能提升有限，但会带来一系列答疑的工作量，所以不开放
    cacheDirectory: false,
    babelrc: process.env.ENABLE_BABELRC ? true : false
  });
  babelOptions.plugins = [].concat((0, _toConsumableArray2.default)(babelOptions.plugins || []), (0, _toConsumableArray2.default)(opts.disableDynamicImport ? [require.resolve('babel-plugin-dynamic-import-node-sync')] : []));
  var babelUse = [{
    loader: require('path').join(__dirname, 'debugLoader.js')
  }, {
    loader: require.resolve('babel-loader'),
    options: babelOptions
  }];
  var eslintOptions = {
    formatter: _eslintFormatter.default,
    baseConfig: {
      extends: [require.resolve('eslint-config-umi')]
    },
    ignore: false,
    eslintPath: require.resolve('eslint'),
    useEslintrc: false
  }; // 用用户的 eslint

  try {
    var _require = require((0, _path.resolve)('package.json')),
        dependencies = _require.dependencies,
        devDependencies = _require.devDependencies; // eslint-disable-line


    if (dependencies.eslint || devDependencies) {
      var eslintPath = (0, _resolve.sync)('eslint', {
        basedir: opts.cwd
      });
      eslintOptions.eslintPath = eslintPath;
      debug("use user's eslint bin: ".concat(eslintPath));
    }
  } catch (e) {} // do nothing
  // 读用户的 eslintrc


  if ((0, _fs.existsSync)((0, _path.resolve)('.eslintrc'))) {
    try {
      var userRc = (0, _readRc.default)((0, _path.resolve)('.eslintrc'));
      debug("userRc: ".concat((0, _stringify.default)(userRc)));

      if (userRc.extends) {
        debug("use user's .eslintrc: ".concat((0, _path.resolve)('.eslintrc')));
        eslintOptions.useEslintrc = true;
        eslintOptions.baseConfig = false;
        eslintOptions.ignore = true;
      } else {
        debug("extend with user's .eslintrc: ".concat((0, _path.resolve)('.eslintrc')));
        eslintOptions.baseConfig = (0, _extends2.default)({}, eslintOptions.baseConfig, userRc);
      }
    } catch (e) {
      debug(e);
    }
  }

  var config = {
    bail: !isDev,
    devtool: opts.devtool || undefined,
    entry: opts.entry || null,
    output: {
      path: outputPath,
      // Add /* filename */ comments to generated require()s in the output.
      pathinfo: isDev,
      filename: "[name]".concat(jsHash, ".js"),
      publicPath: opts.publicPath || undefined,
      chunkFilename: "[name]".concat(jsHash, ".async.js")
    },
    resolve: {
      modules: [(0, _path.resolve)(__dirname, '../node_modules'), 'node_modules'].concat((0, _toConsumableArray2.default)(opts.extraResolveModules || [])),
      extensions: [].concat((0, _toConsumableArray2.default)(opts.extraResolveExtensions || []), ['.web.js', '.web.jsx', '.web.ts', '.web.tsx', '.js', '.json', '.jsx', '.ts', '.tsx']),
      alias: (0, _extends2.default)({
        '@babel/runtime': (0, _path.dirname)(require.resolve('@babel/runtime/package'))
      }, opts.alias)
    },
    module: {
      rules: [].concat((0, _toConsumableArray2.default)(process.env.DISABLE_TSLINT ? [] : [{
        test: /\.tsx?$/,
        include: opts.cwd,
        exclude: /node_modules/,
        enforce: 'pre',
        use: [{
          options: {
            emitErrors: true // formatter: eslintFormatter,

          },
          loader: require.resolve('tslint-loader')
        }]
      }]), (0, _toConsumableArray2.default)(process.env.DISABLE_ESLINT ? [] : [{
        test: /\.(js|jsx)$/,
        include: opts.cwd,
        exclude: /node_modules/,
        enforce: 'pre',
        use: [{
          options: eslintOptions,
          loader: require.resolve('eslint-loader')
        }]
      }]), [{
        exclude: [/\.html|ejs$/, /\.json$/, /\.(js|jsx|ts|tsx)$/, /\.(css|less|scss|sass)$/],
        loader: require.resolve('url-loader'),
        options: {
          limit: 10000,
          name: 'static/[name].[hash:8].[ext]'
        }
      }, {
        test: /\.(js|jsx)$/,
        exclude: /node_modules/,
        use: babelUse
      }, {
        test: /\.(ts|tsx)$/,
        exclude: /node_modules/,
        use: [].concat(babelUse, [{
          loader: require.resolve('awesome-typescript-loader'),
          options: {
            transpileOnly: true
          }
        }])
      }], (0, _toConsumableArray2.default)((opts.extraBabelIncludes || []).map(function (include) {
        return {
          test: /\.(js|jsx)$/,
          include: (0, _path.join)(opts.cwd, include),
          use: babelUse
        };
      })), [{
        test: /\.html$/,
        loader: require.resolve('file-loader'),
        options: {
          name: '[name].[ext]'
        }
      }], cssRules)
    },
    plugins: [].concat((0, _toConsumableArray2.default)(isDev ? [new _webpack.default.HotModuleReplacementPlugin(), new _WatchMissingNodeModulesPlugin.default((0, _path.join)(opts.cwd, 'node_modules')), new _systemBellWebpackPlugin.default()].concat(opts.devtool ? [] : [new _webpack.default.SourceMapDevToolPlugin({
      columns: false,
      moduleFilenameTemplate: function moduleFilenameTemplate(info) {
        if (/\/koi-pkgs\/packages/.test(info.absoluteResourcePath) || /packages\/koi-core/.test(info.absoluteResourcePath) || /webpack\/bootstrap/.test(info.absoluteResourcePath) || /\/node_modules\//.test(info.absoluteResourcePath)) {
          return "internal:///".concat(info.absoluteResourcePath);
        }

        return (0, _path.resolve)(info.absoluteResourcePath).replace(/\\/g, '/');
      }
    })]) : [new _webpack.default.optimize.OccurrenceOrderPlugin(), new _webpack.default.optimize.ModuleConcatenationPlugin(), new _extractTextWebpackPlugin.default({
      filename: "[name]".concat(cssHash, ".css"),
      allChunks: true
    })].concat((0, _toConsumableArray2.default)(opts.serviceWorker ? [new _swPrecacheWebpackPlugin.default((0, _extends2.default)({
      filename: 'service-worker.js',
      minify: false,
      staticFileGlobsIgnorePatterns: [/\.map$/, /asset-manifest\.json$/]
    }, opts.serviceWorker))] : []), (0, _toConsumableArray2.default)(opts.manifest ? [new _webpackManifestPlugin.default((0, _extends2.default)({
      fileName: 'manifest.json'
    }, opts.manifest))] : []))), (0, _toConsumableArray2.default)(isDev || process.env.NO_COMPRESS ? [] : [new _webpack.default.optimize.UglifyJsPlugin((0, _extends2.default)({}, _uglifyJS.default, opts.devtool ? {
      sourceMap: true
    } : {}))]), [new _webpack.default.DefinePlugin((0, _extends2.default)({
      'process.env.NODE_ENV': (0, _stringify.default)( // eslint-disable-line
      isDev ? 'development' : 'production')
    }, process.env.SOCKET_SERVER ? {
      'process.env.SOCKET_SERVER': (0, _stringify.default)(process.env.SOCKET_SERVER)
    } : {}, (0, _stringifyObject.default)(opts.define || {})))], (0, _toConsumableArray2.default)(process.env.ANALYZE ? [new _webpackBundleAnalyzer.BundleAnalyzerPlugin({
      analyzerMode: 'server',
      analyzerPort: process.env.ANALYZE_PORT || 8888,
      openAnalyzer: true
    })] : []), (0, _toConsumableArray2.default)(opts.html ? [new _htmlWebpackPlugin.default(opts.html)] : []), [new _caseSensitivePathsWebpackPlugin.default(), new _webpack.default.LoaderOptionsPlugin({
      options: {
        context: __dirname
      }
    })], (0, _toConsumableArray2.default)(process.env.TS_TYPECHECK ? [new _forkTsCheckerWebpackPlugin.default()] : []), (0, _toConsumableArray2.default)(opts.ignoreMomentLocale ? [new _webpack.default.IgnorePlugin(/^\.\/locale$/, /moment$/)] : []), (0, _toConsumableArray2.default)(commonsPlugins), copyPlugins),
    externals: opts.externals,
    node: {
      dgram: 'empty',
      fs: 'empty',
      net: 'empty',
      tls: 'empty',
      child_process: 'empty'
    },
    performance: isDev ? {
      hints: false
    } : {}
  };

  if (process.env.PUBLIC_PATH) {
    config.output.publicPath = "".concat((0, _utils.stripLastSlash)(process.env.PUBLIC_PATH), "/");
  }

  return (0, _applyWebpackConfig.applyWebpackConfig)(config);
}