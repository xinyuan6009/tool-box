"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getUserConfig;
exports.watchConfigs = watchConfigs;
exports.unwatchConfigs = unwatchConfigs;

var _stringify = _interopRequireDefault(require("@babel/runtime/core-js/json/stringify"));

var _getIterator2 = _interopRequireDefault(require("@babel/runtime/core-js/get-iterator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _assign = _interopRequireDefault(require("@babel/runtime/core-js/object/assign"));

var _keys = _interopRequireDefault(require("@babel/runtime/core-js/object/keys"));

var _fs = require("fs");

var _path = require("path");

var _assert = _interopRequireDefault(require("assert"));

var _stripJsonComments = _interopRequireDefault(require("strip-json-comments"));

var _requireindex = _interopRequireDefault(require("requireindex"));

var _didyoumean = _interopRequireDefault(require("didyoumean"));

var _chalk = _interopRequireDefault(require("chalk"));

var _lodash = _interopRequireDefault(require("lodash.isequal"));

var _isPlainObject = _interopRequireDefault(require("is-plain-object"));

var _reactDevUtils = require("../reactDevUtils");

var _watch = require("./watch");

var debug = require('debug')('af-webpack:getUserConfig');

var pluginsMap = (0, _requireindex.default)((0, _path.join)(__dirname, './configs'));
var plugins = (0, _keys.default)(pluginsMap).map(function (key) {
  return pluginsMap[key].default();
});
var pluginNames = plugins.map(function (p) {
  return p.name;
});
var pluginsMapByName = plugins.reduce(function (memo, p) {
  memo[p.name] = p;
  return memo;
}, {});
var devServer = null;
var USER_CONFIGS = 'USER_CONFIGS';

function throwError(msg) {
  printError(msg);
  throw new Error(msg);
}

function printError(messages) {
  if (devServer) {
    devServer.sockWrite(devServer.sockets, 'errors', typeof messages === 'string' ? [messages] : messages);
  }
}

function reload() {
  devServer.sockWrite(devServer.sockets, 'content-changed');
}

function restart(why) {
  (0, _reactDevUtils.clearConsole)();
  console.log(_chalk.default.green("Since ".concat(why, ", try to restart the server")));
  (0, _watch.unwatch)();
  devServer.close();
  process.send({
    type: 'RESTART'
  });
}

function merge(oldObj, newObj) {
  for (var key in newObj) {
    if (Array.isArray(newObj[key]) && Array.isArray(oldObj[key])) {
      oldObj[key] = oldObj[key].concat(newObj[key]);
    } else if ((0, _isPlainObject.default)(newObj[key]) && (0, _isPlainObject.default)(oldObj[key])) {
      oldObj[key] = (0, _assign.default)(oldObj[key], newObj[key]);
    } else {
      oldObj[key] = newObj[key];
    }
  }
}

function replaceNpmVariables(value, pkg) {
  if (typeof value === 'string') {
    return value.replace('$npm_package_name', pkg.name).replace('$npm_package_version', pkg.version);
  } else {
    return value;
  }
}

function getUserConfig() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _opts$cwd = opts.cwd,
      cwd = _opts$cwd === void 0 ? process.cwd() : _opts$cwd,
      _opts$configFile = opts.configFile,
      configFile = _opts$configFile === void 0 ? '.webpackrc' : _opts$configFile,
      _opts$disabledConfigs = opts.disabledConfigs,
      disabledConfigs = _opts$disabledConfigs === void 0 ? [] : _opts$disabledConfigs; // TODO: 支持数组的形式？
  // Read config from configFile and `${configFile}.js`

  var rcFile = (0, _path.resolve)(cwd, configFile);
  var jsRCFile = (0, _path.resolve)(cwd, "".concat(configFile, ".js"));
  (0, _assert.default)(!((0, _fs.existsSync)(rcFile) && (0, _fs.existsSync)(jsRCFile)), "".concat(configFile, " file and ").concat(configFile, ".js file can not exist at the same time."));
  var config = {};

  if ((0, _fs.existsSync)(rcFile)) {
    config = JSON.parse((0, _stripJsonComments.default)((0, _fs.readFileSync)(rcFile, 'utf-8')));
  }

  if ((0, _fs.existsSync)(jsRCFile)) {
    // no cache
    delete require.cache[jsRCFile];
    config = require(jsRCFile);
  } // Context for validate function


  var context = {
    cwd: cwd
  }; // Validate

  var errorMsg = null;
  (0, _keys.default)(config).forEach(function (key) {
    // 禁用项
    if (disabledConfigs.includes(key)) {
      errorMsg = "Configuration item ".concat(key, " is disabled, please remove it.");
    } // 非法的项


    if (!pluginNames.includes(key)) {
      var guess = (0, _didyoumean.default)(key, pluginNames);
      var affix = guess ? "do you meen ".concat(guess, " ?") : 'please remove it.';
      errorMsg = "Configuration item ".concat(key, " is not valid, ").concat(affix);
    } else {
      // run config plugin's validate
      var plugin = pluginsMapByName[key];

      if (plugin.validate) {
        try {
          plugin.validate.call(context, config[key]);
        } catch (e) {
          errorMsg = e.message;
        }
      }
    }
  }); // 确保不管校验是否出错，下次 watch 判断时能拿到正确的值

  if (errorMsg) {
    if (
    /* from watch */
    opts.setConfig) {
      opts.setConfig(config);
    }

    throwError(errorMsg);
  } // Merge config with current env


  if (config.env) {
    if (config.env[process.env.NODE_ENV]) merge(config, config.env[process.env.NODE_ENV]);
    delete config.env;
  } // Replace npm variables


  var pkgFile = (0, _path.resolve)(cwd, 'package.json');

  if ((0, _keys.default)(config).length && (0, _fs.existsSync)(pkgFile)) {
    var pkg = JSON.parse((0, _fs.readFileSync)(pkgFile, 'utf-8'));
    config = (0, _keys.default)(config).reduce(function (memo, key) {
      memo[key] = replaceNpmVariables(config[key], pkg);
      return memo;
    }, {});
  }

  var configFailed = false;

  function watchConfigsAndRun(_devServer) {
    devServer = _devServer;
    watchConfigs(opts).on('all', function (event, path) {
      try {
        var _getUserConfig = getUserConfig((0, _extends2.default)({}, opts, {
          setConfig: function setConfig(newConfig) {
            config = newConfig;
          }
        })),
            newConfig = _getUserConfig.config; // 从失败中恢复过来，需要 reload 一次


        if (configFailed) {
          configFailed = false;
          reload();
        } // 比较，然后执行 onChange


        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = (0, _getIterator2.default)(plugins), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _plugin = _step.value;
            var name = _plugin.name,
                onChange = _plugin.onChange;

            if (!(0, _lodash.default)(newConfig[name], config[name])) {
              debug("Config ".concat(name, " changed, from ").concat((0, _stringify.default)(config[name]), " to ").concat((0, _stringify.default)(newConfig[name])));
              (onChange || restart.bind(null, "".concat(name, " changed"))).call(null, {
                name: name,
                val: config[name],
                newVal: newConfig[name],
                config: config,
                newConfig: newConfig
              });
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      } catch (e) {
        configFailed = true;
        console.error(_chalk.default.red("Watch handler failed, since ".concat(e.message)));
        console.error(e);
      }
    });
  }

  debug("UserConfig: ".concat((0, _stringify.default)(config)));
  return {
    config: config,
    watch: watchConfigsAndRun
  };
}

function watchConfigs() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _opts$cwd2 = opts.cwd,
      cwd = _opts$cwd2 === void 0 ? process.cwd() : _opts$cwd2,
      _opts$configFile2 = opts.configFile,
      configFile = _opts$configFile2 === void 0 ? '.webpackrc' : _opts$configFile2;
  var rcFile = (0, _path.resolve)(cwd, configFile);
  var jsRCFile = (0, _path.resolve)(cwd, "".concat(configFile, ".js"));
  return (0, _watch.watch)(USER_CONFIGS, [rcFile, jsRCFile]);
}

function unwatchConfigs() {
  (0, _watch.unwatch)(USER_CONFIGS);
}