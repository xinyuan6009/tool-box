"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = dev;

var _WebpackDevServerUtils = require("./WebpackDevServerUtils");

var _clearConsole = _interopRequireDefault(require("./clearConsole"));

var _openBrowser = _interopRequireDefault(require("react-dev-utils/openBrowser"));

var _webpack = _interopRequireDefault(require("webpack"));

var _webpackDevServer = _interopRequireDefault(require("webpack-dev-server"));

var _chalk = _interopRequireDefault(require("chalk"));

var _errorOverlayMiddleware = _interopRequireDefault(require("./errorOverlayMiddleware"));

var _send = _interopRequireWildcard(require("./send"));

var _choosePort = _interopRequireDefault(require("./choosePort"));

var isInteractive = process.stdout.isTTY;
var DEFAULT_PORT = parseInt(process.env.PORT, 10) || 8000;
var HOST = process.env.HOST || '0.0.0.0';
var PROTOCOL = 'http';

var noop = function noop() {};

process.env.NODE_ENV = 'development';

function dev(_ref) {
  var webpackConfig = _ref.webpackConfig,
      extraMiddlewares = _ref.extraMiddlewares,
      beforeServer = _ref.beforeServer,
      afterServer = _ref.afterServer,
      _ref$onCompileDone = _ref.onCompileDone,
      onCompileDone = _ref$onCompileDone === void 0 ? noop : _ref$onCompileDone,
      _ref$onCompileInvalid = _ref.onCompileInvalid,
      onCompileInvalid = _ref$onCompileInvalid === void 0 ? noop : _ref$onCompileInvalid,
      proxy = _ref.proxy,
      openBrowserOpts = _ref.openBrowser;

  if (!webpackConfig) {
    throw new Error('必须提供 webpackConfig 配置项');
  }

  (0, _choosePort.default)(DEFAULT_PORT).then(function (port) {
    if (port === null) {
      return;
    }

    var urls = (0, _WebpackDevServerUtils.prepareUrls)(PROTOCOL, HOST, port);
    var compiler = (0, _WebpackDevServerUtils.createCompiler)(_webpack.default, webpackConfig, 'Your App', urls); // Webpack startup recompilation fix. Remove when @sokra fixes the bug.
    // https://github.com/webpack/webpack/issues/2983
    // https://github.com/webpack/watchpack/issues/25

    var timefix = 11000;
    compiler.plugin('watch-run', function (watching, callback) {
      watching.startTime += timefix;
      callback();
    });
    compiler.plugin('done', function (stats) {
      (0, _send.default)({
        type: _send.DONE
      });
      stats.startTime -= timefix;
      onCompileDone();
    });
    compiler.plugin('invalid', function () {
      (0, _send.default)({
        type: _send.COMPILING
      });
      onCompileInvalid();
    });
    var serverConfig = {
      disableHostCheck: true,
      compress: true,
      clientLogLevel: 'none',
      hot: true,
      quiet: true,
      headers: {
        'access-control-allow-origin': '*'
      },
      publicPath: webpackConfig.output.publicPath,
      watchOptions: {
        ignored: /node_modules/
      },
      historyApiFallback: {
        disableDotRule: true
      },
      overlay: false,
      host: HOST,
      proxy: proxy,
      before: function before(app) {
        if (extraMiddlewares) {
          extraMiddlewares.forEach(function (middleware) {
            app.use(middleware);
          });
        }

        app.use((0, _errorOverlayMiddleware.default)());
      }
    };
    var devServer = new _webpackDevServer.default(compiler, serverConfig);

    if (beforeServer) {
      beforeServer(devServer);
    }

    devServer.listen(port, HOST, function (err) {
      if (err) {
        console.log(err);
        return;
      }

      if (isInteractive) {
        (0, _clearConsole.default)();
      }

      console.log(_chalk.default.cyan('Starting the development server...\n'));

      if (openBrowserOpts) {
        (0, _openBrowser.default)(urls.localUrlForBrowser);
      }

      (0, _send.default)({
        type: _send.STARTING
      });

      if (afterServer) {
        afterServer(devServer);
      }
    });
  }).catch(function (err) {
    console.log(err);
  });
}