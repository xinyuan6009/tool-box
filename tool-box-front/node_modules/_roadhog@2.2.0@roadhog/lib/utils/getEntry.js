"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends4 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _keys = _interopRequireDefault(require("@babel/runtime/core-js/object/keys"));

var _path = require("path");

var _fs = require("fs");

var _glob = _interopRequireDefault(require("glob"));

var _isPlainObject = _interopRequireDefault(require("is-plain-object"));

var _reactDevUtils = require("af-webpack/react-dev-utils");

// entry 支持 4 种格式：
//
// 1. 什么都没配，取 src/index.(j|t)sx?
// 2. 对象
// 3. 字符串
// 4. 数组
function _default() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var cwd = opts.cwd,
      entry = opts.entry,
      isBuild = opts.isBuild;
  var entryObj = null;

  if (!entry) {
    entryObj = {
      index: getExistsDefaultEntry(cwd)
    };
  } else if (typeof entry === 'string') {
    var files = getFiles(entry, cwd);
    entryObj = getEntries(files);
  } else if (Array.isArray(entry)) {
    var _files = entry.reduce(function (memo, entryItem) {
      return memo.concat(getFiles(entryItem, cwd));
    }, []);

    entryObj = getEntries(_files);
  } else if ((0, _isPlainObject.default)(entry)) {
    entryObj = entry;
  } else {
    throw new Error("entry should be String, Array or Plain Object, but got ".concat(entry));
  } // Add HotDevClient


  if (isBuild) {
    return entryObj;
  } else {
    return (0, _keys.default)(entryObj).reduce(function (memo, key) {
      return !Array.isArray(entryObj[key]) ? (0, _extends4.default)({}, memo, (0, _defineProperty2.default)({}, key, [_reactDevUtils.webpackHotDevClientPath, entryObj[key]])) : (0, _extends4.default)({}, memo, (0, _defineProperty2.default)({}, key, entryObj[key]));
    }, {});
  }
}

function getEntry(filePath) {
  var key = (0, _path.basename)(filePath).replace(/\.(j|t)sx?$/, '');
  return (0, _defineProperty2.default)({}, key, filePath);
}

function getFiles(entry, cwd) {
  var files = _glob.default.sync(entry, {
    cwd: cwd
  });

  return files.map(function (file) {
    return file.charAt(0) === '.' ? file : ".".concat(_path.sep).concat(file);
  });
}

function getEntries(files) {
  return files.reduce(function (memo, file) {
    return (0, _extends4.default)({}, memo, getEntry(file));
  }, {});
}

function getExistsDefaultEntry(cwd) {
  if ((0, _fs.existsSync)((0, _path.join)(cwd, './src/index.js'))) {
    return './src/index.js';
  }

  if ((0, _fs.existsSync)((0, _path.join)(cwd, './src/index.jsx'))) {
    return './src/index.jsx';
  }

  if ((0, _fs.existsSync)((0, _path.join)(cwd, './src/index.ts'))) {
    return './src/index.ts';
  }

  if ((0, _fs.existsSync)((0, _path.join)(cwd, './src/index.tsx'))) {
    return './src/index.tsx';
  } // default


  return './src/index.js';
}