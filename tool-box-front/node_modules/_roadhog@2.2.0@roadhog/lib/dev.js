"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = runDev;

var _stringify = _interopRequireDefault(require("@babel/runtime/core-js/json/stringify"));

var _path = require("path");

var _dev = _interopRequireDefault(require("af-webpack/dev"));

var _chalk = _interopRequireDefault(require("chalk"));

var _getUserConfig = _interopRequireWildcard(require("af-webpack/getUserConfig"));

var _getWebpackConfig = _interopRequireDefault(require("./getWebpackConfig"));

var _getPaths = _interopRequireDefault(require("./getPaths"));

var _registerBabel = _interopRequireDefault(require("./registerBabel"));

var _mock = require("./utils/mock");

var debug = require('debug')('roadhog:dev');

function runDev() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _opts$cwd = opts.cwd,
      cwd = _opts$cwd === void 0 ? process.cwd() : _opts$cwd;
  var babel = (0, _path.resolve)(__dirname, './babel.js');
  var paths = (0, _getPaths.default)(cwd); // register babel for config files

  (0, _registerBabel.default)(babel, {
    cwd: cwd,
    configOnly: true
  }); // get user config

  var config = null;
  var returnedWatchConfig = null;

  try {
    var configObj = (0, _getUserConfig.default)({
      cwd: cwd
    });
    config = configObj.config;
    returnedWatchConfig = configObj.watch;
    debug("user config: ".concat((0, _stringify.default)(config)));
  } catch (e) {
    console.error(_chalk.default.red(e.message));
    debug('Get .webpackrc config failed, watch config and reload'); // 监听配置项变更，然后重新执行 dev 逻辑

    (0, _getUserConfig.watchConfigs)().on('all', function (event, path) {
      debug("[".concat(event, "] ").concat(path, ", unwatch and reload"));
      (0, _getUserConfig.unwatchConfigs)();
      runDev(opts);
    });
    return;
  } // get webpack config


  var webpackConfig = (0, _getWebpackConfig.default)({
    cwd: cwd,
    config: config,
    babel: babel,
    paths: paths
  });
  (0, _dev.default)({
    webpackConfig: webpackConfig,
    proxy: config.proxy || {},
    beforeServer: function beforeServer(devServer) {
      try {
        (0, _mock.applyMock)(devServer);
      } catch (e) {
        console.log(e);
      }
    },
    afterServer: function afterServer(devServer) {
      returnedWatchConfig(devServer);
    },
    openBrowser: true
  });
}